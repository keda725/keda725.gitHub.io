<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Do Some Great!</title>
    <link>https://keda725.github.io/</link>
    <description>Recent content on Do Some Great!</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Mon, 10 Aug 2020 14:24:45 +0800</lastBuildDate>
    
	<atom:link href="https://keda725.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Java基础之方法 变量</title>
      <link>https://keda725.github.io/posts/2020/08/java%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%96%B9%E6%B3%95-%E5%8F%98%E9%87%8F/</link>
      <pubDate>Mon, 10 Aug 2020 14:24:45 +0800</pubDate>
      
      <guid>https://keda725.github.io/posts/2020/08/java%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%96%B9%E6%B3%95-%E5%8F%98%E9%87%8F/</guid>
      <description>一、方法  方法：语句的集合，他们一起执行一个功能  方法是解决一类问题的步骤的有序集合 方法包含在类或者对象中 方法在程序中被创建 在其它地方被引用  二、构造器 构造器：   package com.github.zuojiabin; public class Main { public static void main(String[] args) { Cat cat = new Cat(); cat.name = &amp;#34;喵&amp;#34;; Cat cat1 = new Cat(&amp;#34;喵喵&amp;#34;); } }   package com.github.zuojiabin; public class Cat { //成员变量  public String name; //静态成员变量 不和任何对象相绑定  //static int i  //假如没有声明任何的constructor 构造器  //编译器会自动帮你生成一个  // &amp;lt;init&amp;gt;  //Cat() {}  //假如你写了下面的有参数的构造方法 那编译器就不会帮你生成，并且在你创建cat实例的时候  //如果你没有传入参数的时候 编译器会报错  public Cat() { } public Cat(String name){ this.</description>
    </item>
    
    <item>
      <title>身边美好的风景2020/8/8</title>
      <link>https://keda725.github.io/posts/2020/08/%E8%BA%AB%E8%BE%B9%E7%BE%8E%E5%A5%BD%E7%9A%84%E9%A3%8E%E6%99%AF2020/8/8/</link>
      <pubDate>Sat, 08 Aug 2020 22:56:58 +0800</pubDate>
      
      <guid>https://keda725.github.io/posts/2020/08/%E8%BA%AB%E8%BE%B9%E7%BE%8E%E5%A5%BD%E7%9A%84%E9%A3%8E%E6%99%AF2020/8/8/</guid>
      <description>哈哈 太久没怎么拍过街上的风景啦，今天也是兴趣来了拍了几张，记录一下身边美好😁
ps：确实没有挑出来很多，也就这四张比较满意🎉🎉🎉
 一个投篮机就是他们的世界
 什么时候我也能这么潮？
 办活动的小姐姐被围着一通拍～
 舞台上的人即使是黑白配色也是光彩照人
 这样的照片小集合 应该未来还有。</description>
    </item>
    
    <item>
      <title>Java之异常体系</title>
      <link>https://keda725.github.io/posts/2020/08/java%E4%B9%8B%E5%BC%82%E5%B8%B8%E4%BD%93%E7%B3%BB/</link>
      <pubDate>Thu, 06 Aug 2020 17:08:20 +0800</pubDate>
      
      <guid>https://keda725.github.io/posts/2020/08/java%E4%B9%8B%E5%BC%82%E5%B8%B8%E4%BD%93%E7%B3%BB/</guid>
      <description>异常入门与控制流 异常的类型体系 异常的栈轨迹 异常处理 </description>
    </item>
    
    <item>
      <title>Java之IO</title>
      <link>https://keda725.github.io/posts/2020/08/java%E4%B9%8Bio/</link>
      <pubDate>Thu, 06 Aug 2020 17:03:38 +0800</pubDate>
      
      <guid>https://keda725.github.io/posts/2020/08/java%E4%B9%8Bio/</guid>
      <description>计算机多级体系原理简介 文件的本质 输入 输出 Java的io 文件类File Java- nio </description>
    </item>
    
    <item>
      <title>Web前后端架构分析</title>
      <link>https://keda725.github.io/posts/2020/08/web%E5%89%8D%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%88%86%E6%9E%90/</link>
      <pubDate>Thu, 06 Aug 2020 16:59:38 +0800</pubDate>
      
      <guid>https://keda725.github.io/posts/2020/08/web%E5%89%8D%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%88%86%E6%9E%90/</guid>
      <description>计算机网络架构与HTTP原理 使用Java发起http请求 使用Java解析html提取内容 同步与异步加载 http方法和状态码 http的header和body http协议实战 </description>
    </item>
    
    <item>
      <title>Collection体系原理与常用实现</title>
      <link>https://keda725.github.io/posts/2020/08/collection%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86%E4%B8%8E%E5%B8%B8%E7%94%A8%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Thu, 06 Aug 2020 16:57:58 +0800</pubDate>
      
      <guid>https://keda725.github.io/posts/2020/08/collection%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86%E4%B8%8E%E5%B8%B8%E7%94%A8%E5%AE%9E%E7%8E%B0/</guid>
      <description>Collection体系原理与常用实现 Map与常用实现 </description>
    </item>
    
    <item>
      <title>Maven包管理与maven初步</title>
      <link>https://keda725.github.io/posts/2020/08/maven%E5%8C%85%E7%AE%A1%E7%90%86%E4%B8%8Emaven%E5%88%9D%E6%AD%A5/</link>
      <pubDate>Thu, 06 Aug 2020 16:55:47 +0800</pubDate>
      
      <guid>https://keda725.github.io/posts/2020/08/maven%E5%8C%85%E7%AE%A1%E7%90%86%E4%B8%8Emaven%E5%88%9D%E6%AD%A5/</guid>
      <description>Java的包原理 Maven的包管理 包冲突及解决 maven的其它知识 </description>
    </item>
    
    <item>
      <title>Hugo搭建个人博客</title>
      <link>https://keda725.github.io/posts/2020/08/hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Thu, 06 Aug 2020 16:54:22 +0800</pubDate>
      
      <guid>https://keda725.github.io/posts/2020/08/hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</guid>
      <description>Hugo搭建个人博客</description>
    </item>
    
    <item>
      <title>Git之远程仓库</title>
      <link>https://keda725.github.io/posts/2020/08/git%E4%B9%8B%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/</link>
      <pubDate>Thu, 06 Aug 2020 16:50:09 +0800</pubDate>
      
      <guid>https://keda725.github.io/posts/2020/08/git%E4%B9%8B%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/</guid>
      <description>远程仓库 </description>
    </item>
    
    <item>
      <title>Git之本地仓库</title>
      <link>https://keda725.github.io/posts/2020/08/git%E4%B9%8B%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93/</link>
      <pubDate>Thu, 06 Aug 2020 16:49:28 +0800</pubDate>
      
      <guid>https://keda725.github.io/posts/2020/08/git%E4%B9%8B%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93/</guid>
      <description>本地仓库 </description>
    </item>
    
    <item>
      <title>命令行</title>
      <link>https://keda725.github.io/posts/2020/08/%E5%91%BD%E4%BB%A4%E8%A1%8C/</link>
      <pubDate>Thu, 06 Aug 2020 16:46:16 +0800</pubDate>
      
      <guid>https://keda725.github.io/posts/2020/08/%E5%91%BD%E4%BB%A4%E8%A1%8C/</guid>
      <description>命令行 命令行的历史 命令行如何启动 工作目录和环境变量 可执行程序 参数 Linux文件权限 输入与输出 Linux常见命令详解 使用命令行编译Java程序 Java中fork子进程 </description>
    </item>
    
    <item>
      <title>Java基础（十）</title>
      <link>https://keda725.github.io/posts/2020/08/java%E5%9F%BA%E7%A1%80%E5%8D%81/</link>
      <pubDate>Thu, 06 Aug 2020 16:42:22 +0800</pubDate>
      
      <guid>https://keda725.github.io/posts/2020/08/java%E5%9F%BA%E7%A1%80%E5%8D%81/</guid>
      <description>面向对象：多态 多态 策略模式 使用多态简化、重构代码 </description>
    </item>
    
    <item>
      <title>Java基础（九）</title>
      <link>https://keda725.github.io/posts/2020/08/java%E5%9F%BA%E7%A1%80%E4%B9%9D/</link>
      <pubDate>Thu, 06 Aug 2020 16:38:54 +0800</pubDate>
      
      <guid>https://keda725.github.io/posts/2020/08/java%E5%9F%BA%E7%A1%80%E4%B9%9D/</guid>
      <description>面向对象：组合与继承 继承的本质是避免重复 Java继承体系与Object中的常用方法 继承中的类结构和初始化顺序 实例方法的覆盖 设计模式：模版方法 向上_向下转型 final关键字 单例模式 </description>
    </item>
    
    <item>
      <title>Java基础（八）</title>
      <link>https://keda725.github.io/posts/2020/08/java%E5%9F%BA%E7%A1%80%E5%85%AB/</link>
      <pubDate>Thu, 06 Aug 2020 16:37:17 +0800</pubDate>
      
      <guid>https://keda725.github.io/posts/2020/08/java%E5%9F%BA%E7%A1%80%E5%85%AB/</guid>
      <description>Java对象系统基础 对象基本概念：成员与初始化 方法的重载 对象的初始化顺序 对象的生命周期 </description>
    </item>
    
    <item>
      <title>Java基础（七）</title>
      <link>https://keda725.github.io/posts/2020/08/java%E5%9F%BA%E7%A1%80%E4%B8%83/</link>
      <pubDate>Thu, 06 Aug 2020 16:35:15 +0800</pubDate>
      
      <guid>https://keda725.github.io/posts/2020/08/java%E5%9F%BA%E7%A1%80%E4%B8%83/</guid>
      <description>Java控制流 方法的控制流 while与do-while循环 for与foreach循环 break与continue switch语句 </description>
    </item>
    
    <item>
      <title>Java基础（六）</title>
      <link>https://keda725.github.io/posts/2020/08/java%E5%9F%BA%E7%A1%80%E5%85%AD/</link>
      <pubDate>Thu, 06 Aug 2020 16:33:03 +0800</pubDate>
      
      <guid>https://keda725.github.io/posts/2020/08/java%E5%9F%BA%E7%A1%80%E5%85%AD/</guid>
      <description>Java的运算系统 基本运算符 字增自减运算符 比较运算符 逻辑运算符与短路特性 三元运算符 位运算 运算符优先级与字符串加法操作 </description>
    </item>
    
    <item>
      <title>Java基础（五）</title>
      <link>https://keda725.github.io/posts/2020/08/java%E5%9F%BA%E7%A1%80%E4%BA%94/</link>
      <pubDate>Thu, 06 Aug 2020 16:31:52 +0800</pubDate>
      
      <guid>https://keda725.github.io/posts/2020/08/java%E5%9F%BA%E7%A1%80%E4%BA%94/</guid>
      <description>null与equals约定在数据类型中的应用 </description>
    </item>
    
    <item>
      <title>Java基础（四）</title>
      <link>https://keda725.github.io/posts/2020/08/java%E5%9F%BA%E7%A1%80%E5%9B%9B/</link>
      <pubDate>Thu, 06 Aug 2020 16:29:43 +0800</pubDate>
      
      <guid>https://keda725.github.io/posts/2020/08/java%E5%9F%BA%E7%A1%80%E5%9B%9B/</guid>
      <description>一、数据在计算机中是如何存储的？ 二、基本数据类型 三、类型转换与类型提升 四、基本数据类型对应的装箱类型 </description>
    </item>
    
    <item>
      <title>Java基础（三）</title>
      <link>https://keda725.github.io/posts/2020/08/java%E5%9F%BA%E7%A1%80%E4%B8%89/</link>
      <pubDate>Thu, 06 Aug 2020 16:27:52 +0800</pubDate>
      
      <guid>https://keda725.github.io/posts/2020/08/java%E5%9F%BA%E7%A1%80%E4%B8%89/</guid>
      <description>对象与引用 方法的传值VS传引用 </description>
    </item>
    
    <item>
      <title>Java基础之Java的跨平台性/类/包</title>
      <link>https://keda725.github.io/posts/2020/08/java%E5%9F%BA%E7%A1%80%E4%B9%8Bjava%E7%9A%84%E8%B7%A8%E5%B9%B3%E5%8F%B0%E6%80%A7/%E7%B1%BB/%E5%8C%85/</link>
      <pubDate>Wed, 05 Aug 2020 23:07:08 +0800</pubDate>
      
      <guid>https://keda725.github.io/posts/2020/08/java%E5%9F%BA%E7%A1%80%E4%B9%8Bjava%E7%9A%84%E8%B7%A8%E5%B9%B3%E5%8F%B0%E6%80%A7/%E7%B1%BB/%E5%8C%85/</guid>
      <description>一、Java的跨平台性的一个比喻  ​	一次开发，在所有的机器上都能够跑起来，不管是Windows Linux Mac，在每个操作装有JVM虚拟机，是他帮你做了翻译的事情。
​	每个国家都有自己的语言 为了让别人听懂你讲什么 你在每个国家找了一个懂这个语言的人 你只需要发布一个说明书 每个国家看懂说明书的人 就能根据这说明书 把你的话翻译成这个国家人能听懂的语言 这个人就是JVM 说明书就是字节码(ByteCode)。
二、嘛是字节码？  ​	Java具有跨平台特性，为了实现这个特性Java执行在一台虚拟机上，这个虚拟机就是JVM，Java通过JVM屏蔽了不同平台上之间的差异，从而做到一次编译，处处执行。
​	JVM位于Java编译器和OS平台之间，Java编译器只需要面向JVM，生成JVM能够理解的代码，这个代码就是字节码，JVM再把字节码翻译成真实机器能够理解的二进制机器码。
三、Java语言的基本单元&amp;mdash;类和包  类  public class Cat { //类名是Cat  // 这就是一个类 } //class定义结束 要求：
 类名必须是英文字母开头，后接字母 数字和下划线的组合  习惯以大写字母开头   好的类命名(见名知意)  getClass(获取class) saveGithubPullRequestsToCSV(保存GitHub的pr到csv文件) isEmpty(判断是不是空)    为什么存在包这个东西？   在菜鸟网站上关于包(package)的第一句话是：
​	为了更好的组织类，Java提供了包机制，用来区别类名的命名空间。
 Java包这个机制是为了防止命名冲突，访问控制，提供搜索和定位类 接口 枚举 注释等。举个例子
package com.keda725; public class Main { } public class Main { } 这两个类的区别在于哪里？好像是没有区别，那么可以直接在同一位置创建两个这样的java文件嘛？答案是否定的，那么这实际上是怎么创建两个内容上一样的文件的呢？</description>
    </item>
    
    <item>
      <title>Linux之硬链接和符号链接</title>
      <link>https://keda725.github.io/posts/2020/08/linux%E4%B9%8B%E7%A1%AC%E9%93%BE%E6%8E%A5%E5%92%8C%E7%AC%A6%E5%8F%B7%E9%93%BE%E6%8E%A5/</link>
      <pubDate>Wed, 05 Aug 2020 13:26:39 +0800</pubDate>
      
      <guid>https://keda725.github.io/posts/2020/08/linux%E4%B9%8B%E7%A1%AC%E9%93%BE%E6%8E%A5%E5%92%8C%E7%AC%A6%E5%8F%B7%E9%93%BE%E6%8E%A5/</guid>
      <description>从下面的现象中看有什么不同的地方？  mkdir ln //创建ln文件夹 cd ln	//进入到ln中 touch file1 //创建file1文件 ln file1 file2 //创建file1的一个硬链接文件file2 ln -s file1 file3 //创建file1的一个符号文件file3 ls -li //-i参数显示文件的inode索引节点号 echo &amp;#34;I am file1&amp;#34; &amp;gt;&amp;gt; file1 // 写入“”中的文字到file1 cat file1 //查看file1 cat file2 //查看file3 cat file3 //查看file3 rm -f file1 //强制删除file1 cat file2 //查看file2 cat file3 //查看file3 从上面的现象可以看出：当删除原始文件file1之后 硬链接file2不受影响 但是符号链接file3文件无效
Linux链接概念  硬链接(Hard Link)  硬链接通过索引节点来进行连接，在linux文件系统中，保存在磁盘分区中的文件不管是什么类型的都会被分配到一个编号 成为索引节点号(Inode Index)，在linux中 多个文件名指向同一个索引节点是存在的，一般这种连接就是硬链接。硬链接的作用是允许一个文件拥有多个有效路径名，这样用户就可以建立硬链接到重要文件，以防止误删的功能。只删除一个连接并不影响索引节点本身和其它链接。只有当最后一个链接被删除后，文件的数据块及目录才会被释放，也就是说，文件真正删除的条件是与之相关的所有硬链接文件均被删除。   符号链接(Symbolic Link)  也叫软链接，软链接文件有点像Windows中的快捷方式。实际上是一个特殊的文件。在符号链接中，文件实际上是一个文本文件，其中包含的有另一个文件的位置信息。    不知道你发现了什么没有？🤷‍♂️</description>
    </item>
    
    <item>
      <title>Filo和Io</title>
      <link>https://keda725.github.io/posts/2020/08/filo%E5%92%8Cio/</link>
      <pubDate>Wed, 05 Aug 2020 10:56:02 +0800</pubDate>
      
      <guid>https://keda725.github.io/posts/2020/08/filo%E5%92%8Cio/</guid>
      <description>文件的本质就是一段字节流
一个字节有8个位
为什么两个两个来读字节？ bcd编码 8421
输入输出是站在应用程序的角度
InputStream
 read()  OutputStream
   从文件中读取
抽象类不能实例化的原因 因为这个类中包含着一些没有实现的抽象方法 假如允许 那实例化后 那些没有实现的方法 应该做什么呢
相对路径就好像是一个爸爸
相对路径只有在相对一个路径才有效
就好像你在家里叫爸爸才能到对应到一个人
但是你出们再乱叫爸爸 大家就会用异样的眼光看你
相对的路径 相对的就是jvm进程的当前工作目录
绝对路径就是 小明的爸爸
经典的io模型是基于流的
优点 容易理解 方便抽象 缺点 慢 必须一个一个的来
nio 块 没有顺序</description>
    </item>
    
    <item>
      <title>Maven这个划时代的构建工具  Apache顶级项目</title>
      <link>https://keda725.github.io/posts/2020/08/maven%E8%BF%99%E4%B8%AA%E5%88%92%E6%97%B6%E4%BB%A3%E7%9A%84%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7-apache%E9%A1%B6%E7%BA%A7%E9%A1%B9%E7%9B%AE/</link>
      <pubDate>Tue, 04 Aug 2020 23:52:59 +0800</pubDate>
      
      <guid>https://keda725.github.io/posts/2020/08/maven%E8%BF%99%E4%B8%AA%E5%88%92%E6%97%B6%E4%BB%A3%E7%9A%84%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7-apache%E9%A1%B6%E7%BA%A7%E9%A1%B9%E7%9B%AE/</guid>
      <description>1.Maven是啥：  Maven是Apache软件基金会唯一维护的一款自动化构建工具，专注于服务Java平台的项目构建和依赖管理。 Maven是基于项目对象模型（POM），可以通过一小段描述信息来管理项目的构建、报告和文档的软件项目管理工具。
2.Maven可以干啥：  添加第三方jar包 jar包之间的依赖关系： Maven 可以替我们自动的将当前 jar 包所依赖的其他所有 jar 包全部导入进来 获取第三方jar包： Maven 提供了一个完全统一规范的 jar 包管理体系，只需要在项目中以坐标的方式依赖一个 jar 包，Maven 就会自动从中央仓库进行下载到本地仓库 将项目拆分成多个工程模块 构建项目（打包，编译等）
3.构建项目的几个主要环节：    清理（clean）：删除以前的编译结果，为重新编译做好准备
  编译（compile）：将Java 源程序编译为字节码文件
  测试（test）：针对项目中的关键点进行测试，确保项目在迭代开发过程中关键点的正确性
  报告：在每一次测试后以标准的格式记录和展示测试结果
  打包（package）：将一个包含诸多文件的工程封装为一个压缩文件用于安装或部署。Java 工程对应 jar 包，Web工程对应 war 包。
  安装（install）：在 Maven 环境下特指将打包的结果——jar 包或 war 包安装到本地仓库中。
  部署（deploy）：将打包的结果部署到远程仓库或将 war 包部署到服务器上运行。
  4.maven常用命令   mvn -version/-v —— 显示版本信息 mvn clean —— 清空生成的文件 mvn compile —— 编译 mvn test —— 编译并测试 mvn package —— 生成target目录，编译、测试代码，生成测试报告，生成jar/war文件 mvn site —— 生成项目相关信息的网站 mvn clean compile —— 表示先运行清理之后运行编译，会将代码编译到target文件夹中 mvn clean package —— 运行清理和打包 mvn clean install —— 运行清理和安装，会将打好的包安装到本地仓库中，以便其他的项目可以调用 mvn clean deploy —— 运行清理和发布  5.</description>
    </item>
    
    <item>
      <title>CollectionMap由浅及深（一）</title>
      <link>https://keda725.github.io/posts/2020/08/collectionmap%E7%94%B1%E6%B5%85%E5%8F%8A%E6%B7%B1%E4%B8%80/</link>
      <pubDate>Tue, 04 Aug 2020 23:52:22 +0800</pubDate>
      
      <guid>https://keda725.github.io/posts/2020/08/collectionmap%E7%94%B1%E6%B5%85%E5%8F%8A%E6%B7%B1%E4%B8%80/</guid>
      <description>Collection、Map由浅及深（一） Java集合类介绍： Java集合大致可以分为Set、List、Queue和Map四种体系
  Set代表无序、不可重复的集合；
  List代表有序、重复的集合；
  Map则代表具有映射关系的集合；
  Java 5 又增加了Queue体系集合，代表一种队列集合实现。
 Java集合就像一种容器，可以把多个对象（实际上是对象的引用，但习惯上都称对象）“丢进”该容器中。从Java 5 增加了泛型（此处以后会有链接）以后，Java集合可以记住容器中对象的数据类型，使得编码更加简洁、健壮。
  集合和数组的区别：  数组长度在初始化时指定，只能保存定长的数据。 集合可以保存数量不确定的数据 同时可以保存具有映射关系的数据 （即关联数据 键值对 key-value） 数组元素即可以是基本数据的值 也可以是对象 集合中只能保存对象（即对象的引用变量）基本数据类型要转换成对应的包装类才能放在在集合中。   集合之间的继承关系 Java的集合类主要由两个接口派生而出：Collection和Map,Collection和Map是Java集合框架的根接口。
ArrayList,HashSet,LinkedList,TreeSet是经常用到的已实现的集合类。
Map实现类用于保存具有映射关系的数据。Map保存的每项数据都是key-value对，也就是由key和value两个值组成。Map里的key是不可重复的，key用户标识集合里的每项数据。
图中，HashMap，TreeMap是我们经常会用到的集合类。
Collection 接口： 简介 Collection接口是Set,Queue,List的父接口。Collection接口中定义了多种方法可供其子类进行实现，以实现数据操作。
 add 添加元素 addAll 添加所有元素到collection中 clear 清除collection中所有的元素 contains 如果collection中包含指定的元素 返回true equals 比较collection中包含的元素与指定元素是否相等 hashCode 返回collection的哈希值 isEmpty 如果collection中不包含元素 返回true iterator 返回在collection的元素上进行迭代的迭代器 remove 从此collection中移除指定元素的单个实例 removeAll 从此collection中所有的元素 retainAll 只保留此collection中那些包含制定collection的元素 size 返回collection中的元素数 toArray 返回包含此collection中所有元素的数组  可以看出Collection用法有：添加元素，删除元素，返回Collection集合的个数以及清空集合等。 其中重点介绍iterator()方法，该方法的返回值是Iterator。</description>
    </item>
    
    <item>
      <title>Hugo从无到有以及图片处理问题</title>
      <link>https://keda725.github.io/posts/2020/08/hugo%E4%BB%8E%E6%97%A0%E5%88%B0%E6%9C%89%E4%BB%A5%E5%8F%8A%E5%9B%BE%E7%89%87%E5%A4%84%E7%90%86%E9%97%AE%E9%A2%98/</link>
      <pubDate>Tue, 04 Aug 2020 22:55:58 +0800</pubDate>
      
      <guid>https://keda725.github.io/posts/2020/08/hugo%E4%BB%8E%E6%97%A0%E5%88%B0%E6%9C%89%E4%BB%A5%E5%8F%8A%E5%9B%BE%E7%89%87%E5%A4%84%E7%90%86%E9%97%AE%E9%A2%98/</guid>
      <description>为什么选择hugo?  ​	因为也是刚刚开始搭建自己的博客，看了CodeSheep程序羊老哥以前介绍的hugo，是基于go语言写的，特点就是快，也符合我们当代年轻人的特点(😁)，另外就是搭建起来也很方便 简单几个命令，就可以看到成果，不至于半途而废。(另外google了一下为什么选择hugo？看看别人是怎么说的 机灵鬼.gif)
​	第一点得提的就是Hugo 打出的标语 &amp;ndash; “The world’s fastest framework for building websites”。Hugo 依靠Go语言进行开发，号称世界上最快的构建网站工具，到底有多快？根据相关博主提供的数据，他200篇左右的博文用Hexo 需要10分钟去生成静态网页，而Hugo 只需要10秒。就我个人的体验来说，Hugo确实大大加快了网页生成的速度，平常增加一篇博文然后再生成渲染需要4秒左右，而Hugo基本上是1秒内完成。正是依赖于Hugo 快速生成的特点，调试方便成了Hugo的第二大特点。基本上我在源文件处修改的内容可以实时地显示在网页上，而不用再次敲代码生成再预览，这对于博主来说简直就是一个福音。
放个链接 看看能不能说服你？
hugo从0到1  ​	我建议和我一样的新手 不要直接google搜索 hugo搭建博客 因为有的时候 在别人那行得通 但是到自己这里不行 就会怀疑自己的能力，是不是自己太辣鸡，其实是有的时候写博客，只是为了自己记录一下，可能把有些步骤给省略了，但是官网不会啊，官网就是想让你都能完成，都来使用，所以步骤都会写的很清楚，所以我先把**官网**放在链接里，大家通过查阅文档，有问题了再来看我的博客，这样学习起来，自己的印象也会比较深。
​	odk，废话不多说，我开始啦！（我的环境是macOS）
No1 下载Hugo mac推荐是用homebrew 我后面会写homebrew的教程 这里先欠着哈  brew install hugo //使用brew下载hugo hugo version	//查看hugo版本 确定是否下载成功 看到这个就代表你成功下载了Hugo!!! 🎉🎉🎉
No2 Hugo 创建一个博客 hugo new site xxx //xxx 是你文件的名字 hugo new site keda725.github.io 你就会发现Hugo在当前路径下创建了一个keda725.github.io的文件夹，可以看到Hugo为我们创建了一些文件，themes，date，static等。
|- archetypes ：存放default.md，头文件格式 |- content ：content目录存放博客文章（markdown文件） |- data ：存放自定义模版，导入的toml文件（或json，yaml） |- layouts ：layouts目录存放的是网站的模板文件 |- static ：static目录存放图片，css等静态资源 |- themes ：存放网站主题文件 |- config.</description>
    </item>
    
  </channel>
</rss>