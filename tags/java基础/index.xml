<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java基础 on Do Some Great!</title>
    <link>https://keda725.github.io/tags/java%E5%9F%BA%E7%A1%80/</link>
    <description>Recent content in Java基础 on Do Some Great!</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Fri, 14 Aug 2020 19:55:51 +0800</lastBuildDate>
    
	<atom:link href="https://keda725.github.io/tags/java%E5%9F%BA%E7%A1%80/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>烦人的异常体系</title>
      <link>https://keda725.github.io/posts/2020/08/%E7%83%A6%E4%BA%BA%E7%9A%84%E5%BC%82%E5%B8%B8%E4%BD%93%E7%B3%BB/</link>
      <pubDate>Fri, 14 Aug 2020 19:55:51 +0800</pubDate>
      
      <guid>https://keda725.github.io/posts/2020/08/%E7%83%A6%E4%BA%BA%E7%9A%84%E5%BC%82%E5%B8%B8%E4%BD%93%E7%B3%BB/</guid>
      <description>每当遇到报红，alt+enter
Java的异常体系 finally 不是必要的
catch 也不是必要的
在finally中执行清理工作 不要写返回语句
try-with-resources. 声明在括号中的 在最后会被自动关闭
throw
throws</description>
    </item>
    
    <item>
      <title>原生数据类型和引用数据类型</title>
      <link>https://keda725.github.io/posts/2020/08/%E5%8E%9F%E7%94%9F%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%BC%95%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Wed, 12 Aug 2020 21:16:04 +0800</pubDate>
      
      <guid>https://keda725.github.io/posts/2020/08/%E5%8E%9F%E7%94%9F%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%BC%95%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
      <description>基本数据类型  只要能找到对应的类，就是引用数据类型 否则就是原生数据类型 byte - 1个字节 -128～127
short - 2个字节
int - 4个字节 21亿
long - 8个字节
float - 4个字节 是小数 在计算机中的近似表示 是非准确的 不能对浮点数进行相等的操作
double -8个字节 Math.abs来判断浮点数
char - 2个字节
boolean - true -false
void ？ 也是一种类型 有
int a = 1; byte b = (byte)128; long c = 22_0000_0000L; float d = 0.1f; double e = 1e-7; int f = 0x11; //十六进制的17 int g = 0b1010101; 类型提升  byte 0000 0101</description>
    </item>
    
    <item>
      <title>Java经典问题 传值还是传引用</title>
      <link>https://keda725.github.io/posts/2020/08/java%E7%BB%8F%E5%85%B8%E9%97%AE%E9%A2%98-%E4%BC%A0%E5%80%BC%E8%BF%98%E6%98%AF%E4%BC%A0%E5%BC%95%E7%94%A8/</link>
      <pubDate>Mon, 10 Aug 2020 21:26:37 +0800</pubDate>
      
      <guid>https://keda725.github.io/posts/2020/08/java%E7%BB%8F%E5%85%B8%E9%97%AE%E9%A2%98-%E4%BC%A0%E5%80%BC%E8%BF%98%E6%98%AF%E4%BC%A0%E5%BC%95%E7%94%A8/</guid>
      <description>Java方法调用到底是传值还是传引用？  Java中到底是值传递还是引用传递呢？答案是值传递，Java中没有引用传递这个概念。
 数据类型和内存分配 Java中大概可以分为两大数据类型
  基本数据类型
  byte short int long float double char boolean 八大数据类型
  基本数据类型的内存分配是在栈上完成的 也就是JVM的虚拟机
  int i = 1; // 会在虚拟机栈上分配四个字节的空间出来存放       引用数据类型
  引用类型有类 接口 数组以及null
  User user = new User(); 会经历三个步骤：
1、声明一个引用变量user，在虚拟机栈上分配空间。
2、使用new关键字创建对象实例，在堆上分哦诶空间存放对象的属性信息。
3、将堆上的对象链接到user变量上，所以栈上存储的实际上就是存的对象在堆上的地址信息。
  数组对象也是一样的，栈上存放了一个地址，只想堆上实际分配的数组空间，实际的值是存放在堆上的。
      基本类型 ​	8种基本类型作为方法参数传递时，传的是什么(实参)，方法接受的就是什么(形参)。传递过去的是1，接收到的就是1.穿过去的是true，接收到的就是true。
package com.github.zuojiabin; public class passByValueOrRef { public static void main(String[] args) { int oldIntValue = 1; System.</description>
    </item>
    
    <item>
      <title>Java基础之对象与引用</title>
      <link>https://keda725.github.io/posts/2020/08/java%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%AF%B9%E8%B1%A1%E4%B8%8E%E5%BC%95%E7%94%A8/</link>
      <pubDate>Mon, 10 Aug 2020 16:27:52 +0800</pubDate>
      
      <guid>https://keda725.github.io/posts/2020/08/java%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%AF%B9%E8%B1%A1%E4%B8%8E%E5%BC%95%E7%94%A8/</guid>
      <description>在开始之前 我们先创建一个场景 然后对这个场景进行抽象
package com.github.zuojiabin; public class Home { Cat cat; Cat cat1; public static void main(String[] args) { //1  Home home = new Home(); //2  Cat mimi = new Cat(); //3  mimi.name = &amp;#34;咪咪&amp;#34;; //4  home.cat = mimi; //5  home.cat1 = mimi; } } package com.github.zuojiabin; public class Cat{ public String name; } 对象与引用 引用很难理解 也可以叫做地址 引用就是地址 地址就是引用
在创建过程中，以上面的代码为例子：
创建了两个东西 一个是Home，一个是Cat
在Home中有有两个东西 一个叫cat，一个叫cat1，他们的地址都是null
在执行到4和5的时候，只是把mimi猫的地址指向了Cat,并不是创建了两只猫，在内存空间中只有一只猫</description>
    </item>
    
    <item>
      <title>Java基础之方法、构造器、实例方法、变量</title>
      <link>https://keda725.github.io/posts/2020/08/java%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%96%B9%E6%B3%95%E6%9E%84%E9%80%A0%E5%99%A8%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95%E5%8F%98%E9%87%8F/</link>
      <pubDate>Mon, 10 Aug 2020 14:24:45 +0800</pubDate>
      
      <guid>https://keda725.github.io/posts/2020/08/java%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%96%B9%E6%B3%95%E6%9E%84%E9%80%A0%E5%99%A8%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95%E5%8F%98%E9%87%8F/</guid>
      <description>一、方法  方法：语句的集合，他们一起执行一个功能  方法是解决一类问题的步骤的有序集合 方法包含在类或者对象中 方法在程序中被创建 在其它地方被引用  二、构造器 构造器：   package com.github.zuojiabin; public class Main { public static void main(String[] args) { Cat cat = new Cat(); cat.name = &amp;#34;喵&amp;#34;; Cat cat1 = new Cat(&amp;#34;喵喵&amp;#34;); } }   package com.github.zuojiabin; public class Cat { //成员变量  public String name; //静态成员变量 不和任何对象相绑定  //static int i  //假如没有声明任何的constructor 构造器  //编译器会自动帮你生成一个  // &amp;lt;init&amp;gt;  //Cat() {}  //假如你写了下面的有参数的构造方法 那编译器就不会帮你生成，并且在你创建cat实例的时候  //如果你没有传入参数的时候 编译器会报错  public Cat() { } public Cat(String name){ this.</description>
    </item>
    
    <item>
      <title>Java基础之Java的跨平台性/类/包</title>
      <link>https://keda725.github.io/posts/2020/08/java%E5%9F%BA%E7%A1%80%E4%B9%8Bjava%E7%9A%84%E8%B7%A8%E5%B9%B3%E5%8F%B0%E6%80%A7/%E7%B1%BB/%E5%8C%85/</link>
      <pubDate>Wed, 05 Aug 2020 23:07:08 +0800</pubDate>
      
      <guid>https://keda725.github.io/posts/2020/08/java%E5%9F%BA%E7%A1%80%E4%B9%8Bjava%E7%9A%84%E8%B7%A8%E5%B9%B3%E5%8F%B0%E6%80%A7/%E7%B1%BB/%E5%8C%85/</guid>
      <description>一、Java的跨平台性的一个比喻  ​	一次开发，在所有的机器上都能够跑起来，不管是Windows Linux Mac，在每个操作装有JVM虚拟机，是他帮你做了翻译的事情。
​	每个国家都有自己的语言 为了让别人听懂你讲什么 你在每个国家找了一个懂这个语言的人 你只需要发布一个说明书 每个国家看懂说明书的人 就能根据这说明书 把你的话翻译成这个国家人能听懂的语言 这个人就是JVM 说明书就是字节码(ByteCode)。
二、嘛是字节码？  ​	Java具有跨平台特性，为了实现这个特性Java执行在一台虚拟机上，这个虚拟机就是JVM，Java通过JVM屏蔽了不同平台上之间的差异，从而做到一次编译，处处执行。
​	JVM位于Java编译器和OS平台之间，Java编译器只需要面向JVM，生成JVM能够理解的代码，这个代码就是字节码，JVM再把字节码翻译成真实机器能够理解的二进制机器码。
三、Java语言的基本单元&amp;mdash;类和包  类  public class Cat { //类名是Cat  // 这就是一个类 } //class定义结束 要求：
 类名必须是英文字母开头，后接字母 数字和下划线的组合  习惯以大写字母开头   好的类命名(见名知意)  getClass(获取class) saveGithubPullRequestsToCSV(保存GitHub的pr到csv文件) isEmpty(判断是不是空)    为什么存在包这个东西？   在菜鸟网站上关于包(package)的第一句话是：
​	为了更好的组织类，Java提供了包机制，用来区别类名的命名空间。
 Java包这个机制是为了防止命名冲突，访问控制，提供搜索和定位类 接口 枚举 注释等。举个例子
package com.keda725; public class Main { } public class Main { } 这两个类的区别在于哪里？好像是没有区别，那么可以直接在同一位置创建两个这样的java文件嘛？答案是否定的，那么这实际上是怎么创建两个内容上一样的文件的呢？</description>
    </item>
    
  </channel>
</rss>